{"version":3,"sources":["../../server/controllers/CategoryController.js"],"names":["findCategoryBySQL","req","res","result","sequelize","query","type","QueryTypes","SELECT","model","context","models","Category","mapToModel","send","findAllRows","next","category","findAll","error","categoryProduct","include","products","findRowById","findByPk","params","id","createRow","cate_id","cate_name","body","create","updateRow","update","returning","where","deleteRow","destroy","then","catch","sendStatus"],"mappings":"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","sourcesContent":["import { sequelize } from \"../models/init-models\";\r\nimport middleware from \"../helpers/middleware\";\r\n\r\nconst findCategoryBySQL = async (req, res) => {\r\n    const result = await sequelize.query(\"select cate_id,cate_name from category\", {\r\n        type: sequelize.QueryTypes.SELECT,\r\n        model: req.context.models.Category,\r\n        mapToModel: true\r\n    });\r\n\r\n    return res.send(result);\r\n}\r\n\r\nconst findAllRows = async (req, res,next) => {\r\n   // if(!req.isSeller) middleware.forbidden(next)\r\n    \r\n    try {\r\n        const result = await req.context.models.category.findAll();\r\n        return res.send(result);\r\n    } catch (error) {\r\n        return res.send(error)\r\n    }\r\n\r\n}\r\n\r\nconst categoryProduct = async (req, res) => {\r\n    const result = await req.context.models.category.findAll({\r\n        include: [{\r\n            model: req.context.models.products\r\n        }]\r\n    });\r\n    return res.send(result);\r\n}\r\n\r\nconst findRowById = async (req, res) => {\r\n    const result = await req.context.models.category.findByPk(\r\n        req.params.id\r\n    );\r\n    return res.send(result);\r\n}\r\n\r\nconst createRow = async (req, res) => {\r\n    const { cate_id, cate_name } = req.body;\r\n    const result = await req.context.models.category.create({\r\n        cate_id: cate_id,\r\n        cate_name: cate_name\r\n    });\r\n    return res.send(result);\r\n}\r\n\r\n// update category set cate_name=${1} where cate_id=${2}\r\nconst updateRow = async (req, res) => {\r\n    const { cate_name } = req.body;\r\n    const result = await req.context.models.category.update(\r\n        { cate_name: cate_name },\r\n        {\r\n            returning: true,\r\n            where: { cate_id: req.params.id }\r\n        }\r\n    );\r\n    return res.send(result);\r\n}\r\n\r\n// delete from category where cate_id=${id}\r\nconst deleteRow = async (req, res) => {\r\n    const id = req.params.id;\r\n\r\n    await req.context.models.category.destroy({\r\n        where: { cate_id: id }\r\n    }).then(result => {\r\n        return res.send(\"delete \" + result + \" rows.\")\r\n    }).catch(error => {\r\n        return res.sendStatus(404).send(\"Data not found.\")\r\n    });\r\n\r\n}\r\n\r\n\r\n\r\nexport default {\r\n    findCategoryBySQL,\r\n    findAllRows,\r\n    findRowById,\r\n    createRow,\r\n    updateRow,\r\n    deleteRow,\r\n    categoryProduct\r\n}"],"file":"CategoryController.js"}