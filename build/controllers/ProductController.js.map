{"version":3,"sources":["../../server/controllers/ProductController.js"],"names":["findAllRows","req","res","result","context","models","products","findAll","send","error","sendStatus","createProduct","files","fields","fileAttrb","create","prod_name","value","prod_price","prod_stock","parseInt","prod_desc","prod_cate_id","prod_rating","prod_views","prod_user_id","prod_url_image","file","newFilename","status","json","message","updateProduct","singlePart","UpDownloadHelper","uploadSingleFile","attrb","filename","update","returning","where","prod_id","params","id","deleteRow","destroy"],"mappings":"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","sourcesContent":["import UpDownloadHelper from '../helpers/UpDownloadHelper';\r\n\r\n\r\nconst findAllRows = async (req, res) => {\r\n    try {\r\n        const result = await req.context.models.products.findAll();\r\n        return res.send(result);\r\n    } catch (error) {\r\n        return res.sendStatus(404).send(\"no data found\");\r\n    }\r\n\r\n}\r\n\r\nconst createProduct = async (req, res) => {\r\n        const {files, fields} = req.fileAttrb;\r\n\r\n        try {\r\n            const result = await req.context.models.products.create({\r\n                prod_name: fields[0].value,\r\n                prod_price: fields[1].value,\r\n                prod_stock: parseInt(fields[2].value),\r\n                prod_desc: fields[3].value,\r\n                prod_cate_id: parseInt(fields[4].value),\r\n                prod_rating: parseInt(fields[5].value),\r\n                prod_views: parseInt(fields[6].value),\r\n                prod_user_id: parseInt(fields[7].value),\r\n                prod_url_image: files[0].file.newFilename\r\n            });\r\n            return res.send(result);\r\n        } catch (error) {\r\n            return res.status(404).json({\r\n                message: error.message,\r\n            })\r\n        }\r\n\r\n\r\n    \r\n}\r\n\r\nconst updateProduct = async (req, res) => {\r\n\r\n    try {\r\n        const singlePart = await UpDownloadHelper.uploadSingleFile(req);\r\n        const { attrb: { file, fields, filename }, status: { status } } = singlePart;\r\n        \r\n        if (status === 'succeed') {\r\n            try {\r\n                const result = await req.context.models.products.update(\r\n                    {\r\n                        prod_name: fields.prod_name,\r\n                        prod_price: fields.prod_price,\r\n                        prod_stock: parseInt(fields.prod_stock),\r\n                        prod_desc: fields.prod_desc,\r\n                        prod_cate_id: parseInt(fields.prod_cate_id),\r\n                        prod_rating: parseInt(fields.prod_rating),\r\n                        prod_views: parseInt(fields.prod_views),\r\n                        prod_user_id: parseInt(fields.prod_user_id),\r\n                        prod_url_image: filename\r\n                    },\r\n                    { returning: true, where: { prod_id: parseInt(req.params.id) } }\r\n                );\r\n                return res.send(result);\r\n            } catch (error) {\r\n                return res.send(404).send(error);\r\n            }\r\n\r\n\r\n        }\r\n        return res.send(status);\r\n    } catch (error) {\r\n        return res.send(error);\r\n    }\r\n}\r\n\r\nconst deleteRow = async (req, res) => {\r\n    const id = req.params.id;\r\n    try {\r\n        const result = await req.context.models.products.destroy({\r\n            where: { prod_id: parseInt(id) }\r\n        });\r\n        return res.send(\"delete \" + result + \" rows.\")\r\n    } catch (error) {\r\n        return res.sendStatus(404).send(\"Data not found.\")\r\n    }\r\n\r\n\r\n}\r\n\r\n/* const createProductImage = async (req, res, next) => {\r\n    try {\r\n        const { files, fields } = req.fileAttrb;\r\n\r\n        try {\r\n            const prodId = result.dataValues.prod_id; \r\n            req.prodId = 11;\r\n            req.files = files;\r\n            next();\r\n\r\n        } catch (error) {\r\n            return res.send(404).send(error);\r\n        }\r\n\r\n\r\n    } catch (error) {\r\n        return res.send(error);\r\n    }\r\n}\r\n */\r\n\r\n\r\nexport default {\r\n    findAllRows,\r\n    createProduct,\r\n    updateProduct,\r\n    deleteRow\r\n} "],"file":"ProductController.js"}