{"version":3,"sources":["../../server/helpers/authJWT.js"],"names":["jwt","require","passport","Strategy","jwtSecret","process","env","JWT_SECRET","adminPassword","ADMIN_PASSWORD","jwtOpts","algorithm","expiresIn","use","adminStrategy","authenticate","session","module","exports","login","ensureAdmin","ensureSeller","refreshToken","req","res","next","token","sign","username","user","roleType","userId","email","cookie","httpOnly","json","profile","success","payload","jwtString","headers","authorization","cookies","verify","isSeller","err","Error","statusCode","replace","requestToken","body","status","message","result","models","tokens","findOne","where","token_id","token_expire_date","getTime","Date","newAccessToken","id","config","secret","jwtExpiration","accessToken","error","send","password","cb","users","user_email","user_name","user_id","user_password","user_role_type","dataValues","compare","bcrypt"],"mappings":"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","sourcesContent":["const jwt = require('jsonwebtoken')\r\nconst passport = require('passport')\r\nconst Strategy = require('passport-local').Strategy\r\n\r\nimport bcrypt from 'bcrypt';\r\n\r\nconst jwtSecret = process.env.JWT_SECRET || 'myjwt'\r\nconst adminPassword = process.env.ADMIN_PASSWORD || 'secret'\r\nconst jwtOpts = { algorithm: 'HS256', expiresIn: '30d' }\r\nimport models from '../models/init-models'\r\n\r\npassport.use(adminStrategy())\r\nconst authenticate = passport.authenticate('local', { session: false })\r\n\r\nmodule.exports = {\r\n    authenticate,\r\n    login: login,\r\n    ensureAdmin: ensureAdmin,\r\n    ensureSeller: ensureSeller,\r\n    refreshToken : refreshToken\r\n}\r\n\r\n\r\n\r\nasync function login(req, res, next) {\r\n    const token = await sign({ username: req.user.username, roleType: req.user.roleType });\r\n    const { userId, username, email, roleType } = req.user;\r\n    res.cookie('jwt', token, { httpOnly: true })\r\n\r\n    res.json({ profile: { userId, username, email, roleType }, success: true, token: token })\r\n}\r\n\r\n\r\nasync function sign(payload) {\r\n    const token = await jwt.sign(payload, jwtSecret, jwtOpts)\r\n    return token\r\n}\r\n\r\nasync function ensureSeller(req, res, next) {\r\n    const jwtString = req.headers.authorization || req.cookies.jwt\r\n    const payload = await verify(jwtString)\r\n    if (payload.username) {\r\n        req.user = payload;\r\n        if (req.user.roleType === 'Seller') req.isSeller = true;\r\n        return next();\r\n    }\r\n\r\n    const err = new Error('Unauthorized');\r\n    err.statusCode = 401;\r\n    next(err);\r\n}\r\n\r\nasync function ensureAdmin(req, res, next) {\r\n    const jwtString = req.headers.authorization || req.cookies.jwt\r\n    const payload = await verify(jwtString)\r\n    if (payload.username === 'admin') return next()\r\n    const err = new Error('Unauthorized')\r\n    err.statusCode = 401\r\n    next(err)\r\n}\r\n\r\nasync function verify(jwtString = '') {\r\n    jwtString = jwtString.replace(/^Bearer /i, '')\r\n    try {\r\n        const payload = await jwt.verify(jwtString, jwtSecret)\r\n        return payload\r\n    } catch (err) {\r\n        err.statusCode = 401\r\n        throw err\r\n    }\r\n}\r\n\r\nasync function refreshToken(req, res) {\r\n    const { refreshToken: requestToken } = req.body;\r\n\r\n    if (requestToken == null) {\r\n        return res.status(403).json({ message: \"Refresh Token is required!\" });\r\n    }\r\n\r\n    try {\r\n        const result = await models.tokens.findOne({\r\n            where: { token_id: refreshToken }\r\n        });\r\n\r\n        if (!refreshToken) {\r\n            res.status(403).json({ message: \"Refresh token is not in database!\" });\r\n            return;\r\n        }\r\n\r\n        if (result.token_expire_date.getTime() < new Date().getTime()) {\r\n            res.status(403).json({\r\n                message: \"Refresh token was expired. Please make a new signin request\",\r\n            });\r\n            return;\r\n        }\r\n\r\n        let newAccessToken = jwt.sign({ id: user.id }, config.secret, {\r\n            expiresIn: config.jwtExpiration,\r\n          });\r\n\r\n        return res.status(200).json({\r\n            accessToken: newAccessToken,\r\n            refreshToken: refreshToken.token,\r\n        });\r\n\r\n    } catch (error) {\r\n        return res.status(500).send({ message: error });\r\n    }\r\n\r\n\r\n}\r\n\r\nfunction adminStrategy() {\r\n\r\n    return new Strategy(async function (username, password, cb) {\r\n        try {\r\n            const result = await models.users.findOne({\r\n                where: { user_email: username }\r\n            });\r\n\r\n            const { user_name, user_id, user_password, user_email, user_role_type } = result.dataValues;\r\n            const compare = await bcrypt.compare(password, user_password);\r\n\r\n            if (compare) return cb(null, { username: user_name, userId: user_id, email: user_email, roleType: user_role_type })\r\n        } catch (error) {\r\n            //console.log(error);\r\n            return cb(null, error)\r\n        }\r\n\r\n        cb(null, false)\r\n    })\r\n}\r\n\r\n"],"file":"authJWT.js"}