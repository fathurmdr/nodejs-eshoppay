{"version":3,"sources":["../../server/helpers/middleware.js"],"names":["pinoNoir","require","pinoLogger","STATUS_CODES","logger","serializers","handleError","err","req","res","next","console","error","headersSent","statusCode","errorMessage","status","json","notFound","forbidden","Error","cors","origin","headers","setHeader"],"mappings":";;;;;;;AAAA,MAAMA,QAAQ,GAAGC,OAAO,CAAC,WAAD,CAAxB;;AACA,MAAMC,UAAU,GAAGD,OAAO,CAAC,qBAAD,CAA1B;;AACA,MAAM;AAAEE,EAAAA;AAAF,IAAmBF,OAAO,CAAC,MAAD,CAAhC;;AAIA,MAAMG,MAAM,GAAC,MAAK;AACd,SAAOF,UAAU,CAAC;AACdG,IAAAA,WAAW,EAAEL,QAAQ,CAAC,CAClB,wBADkB,EAElB,oBAFkB,EAGlB,2BAHkB,CAAD;AADP,GAAD,CAAjB;AAOH,CARD;;AAUA,MAAMM,WAAW,GAAC,CAACC,GAAD,EAAMC,GAAN,EAAWC,GAAX,EAAgBC,IAAhB,KAAwB;AACtCC,EAAAA,OAAO,CAACC,KAAR,CAAcL,GAAd;AACA,MAAIE,GAAG,CAACI,WAAR,EAAqB,OAAOH,IAAI,CAACH,GAAD,CAAX;AACrB,QAAMO,UAAU,GAAGP,GAAG,CAACO,UAAJ,IAAkB,GAArC;AACA,QAAMC,YAAY,GAAGZ,YAAY,CAACW,UAAD,CAAZ,IAA4B,gBAAjD;AACAL,EAAAA,GAAG,CAACO,MAAJ,CAAWF,UAAX,EAAuBG,IAAvB,CAA4B;AAAEL,IAAAA,KAAK,EAAEG;AAAT,GAA5B;AACH,CAND;;AAQA,MAAMG,QAAQ,GAAC,CAACV,GAAD,EAAMC,GAAN,KAAa;AACxBA,EAAAA,GAAG,CAACO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEL,IAAAA,KAAK,EAAE;AAAT,GAArB;AACH,CAFD;;AAIA,MAAMO,SAAS,GAAET,IAAD,IAAQ;AACpB,QAAMH,GAAG,GAAG,IAAIa,KAAJ,CAAU,WAAV,CAAZ;AACAb,EAAAA,GAAG,CAACO,UAAJ,GAAiB,GAAjB;AACA,SAAOJ,IAAI,CAACH,GAAD,CAAX;AACH,CAJD;;AAMA,MAAMc,IAAI,GAAC,CAACb,GAAD,EAAMC,GAAN,EAAWC,IAAX,KAAmB;AAC1B,QAAMY,MAAM,GAAGd,GAAG,CAACe,OAAJ,CAAYD,MAA3B;AACAb,EAAAA,GAAG,CAACe,SAAJ,CAAc,6BAAd,EAA6CF,MAAM,IAAI,GAAvD;AACAb,EAAAA,GAAG,CAACe,SAAJ,CACI,8BADJ,EAEI,0CAFJ;AAIAf,EAAAA,GAAG,CAACe,SAAJ,CAAc,kCAAd,EAAkD,MAAlD;AACAf,EAAAA,GAAG,CAACe,SAAJ,CAAc,wBAAd,EAAwC,OAAxC;AACAf,EAAAA,GAAG,CAACe,SAAJ,CACI,8BADJ,EAEI,gEAFJ;AAKAd,EAAAA,IAAI;AACP,CAfD;;eAkBe;AACXN,EAAAA,MAAM,EAAEA,MAAM,EADH;AAEXiB,EAAAA,IAFW;AAGXH,EAAAA,QAHW;AAIXZ,EAAAA,WAJW;AAKXa,EAAAA;AALW,C","sourcesContent":["const pinoNoir = require('pino-noir')\r\nconst pinoLogger = require('express-pino-logger')\r\nconst { STATUS_CODES } = require('http')\r\n\r\n\r\n\r\nconst logger=()=> {\r\n    return pinoLogger({\r\n        serializers: pinoNoir([\r\n            'res.headers.set-cookie',\r\n            'req.headers.cookie',\r\n            'req.headers.authorization'\r\n        ])\r\n    })\r\n}\r\n\r\nconst handleError=(err, req, res, next)=> {\r\n    console.error(err)\r\n    if (res.headersSent) return next(err)\r\n    const statusCode = err.statusCode || 500\r\n    const errorMessage = STATUS_CODES[statusCode] || 'Internal Error'\r\n    res.status(statusCode).json({ error: errorMessage })\r\n}\r\n\r\nconst notFound=(req, res)=> {\r\n    res.status(404).json({ error: 'Not Found' })\r\n}\r\n\r\nconst forbidden=(next)=>{\r\n    const err = new Error(\"Forbidden\")\r\n    err.statusCode = 403;\r\n    return next(err)\r\n}\r\n\r\nconst cors=(req, res, next)=> {\r\n    const origin = req.headers.origin\r\n    res.setHeader('Access-Control-Allow-Origin', origin || '*')\r\n    res.setHeader(\r\n        'Access-Control-Allow-Methods',\r\n        'POST, GET, PUT, DELETE, OPTIONS, XMODIFY'\r\n    )\r\n    res.setHeader('Access-Control-Allow-Credentials', 'true')\r\n    res.setHeader('Access-Control-Max-Age', '86400')\r\n    res.setHeader(\r\n        'Access-Control-Allow-Headers',\r\n        'X-Requested-With, X-HTTP-Method-Override, Content-Type, Accept'\r\n\r\n    )\r\n    next()\r\n}\r\n\r\n\r\nexport default {\r\n    logger: logger(),\r\n    cors,\r\n    notFound,\r\n    handleError,\r\n    forbidden\r\n}"],"file":"middleware.js"}