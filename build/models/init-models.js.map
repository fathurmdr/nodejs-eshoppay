{"version":3,"sources":["../../server/models/init-models.js"],"names":["DataTypes","_sequelize","sequelize","Sequelize","configdb","database","username","password","host","dialect","operatorsAliases","dialectOptions","ssl","require","rejectUnauthorized","pool","max","min","acquire","idle","initModels","cart","_cart","init","category","_category","line_items","_line_items","orders","_orders","products","_products","products_images","_products_images","token_refresh","_token_refresh","users","_users","belongsTo","foreignKey","hasMany","as","models"],"mappings":"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","sourcesContent":["import _sequelize from \"sequelize\";\r\nimport Sequelize from 'sequelize';\r\nconst DataTypes = _sequelize.DataTypes;\r\nimport _cart from  \"./cart.js\";\r\nimport _category from  \"./category.js\";\r\nimport _line_items from  \"./line_items.js\";\r\nimport _orders from  \"./orders.js\";\r\nimport _products from  \"./products.js\";\r\nimport _products_images from  \"./products_images.js\";\r\nimport _token_refresh from  \"./token_refresh.js\";\r\nimport _users from  \"./users.js\";\r\n\r\n\r\nimport config from '../config/config'\r\nimport configdb from '../config/config-heroku'\r\n\r\n// const sequelize = new Sequelize(\r\n//   config.db_name,\r\n//   config.db_username,\r\n//   config.db_password,\r\n//   {\r\n//     dialect : \"postgres\",\r\n//     pool : {\r\n//       max : 5,\r\n//       min : 0,\r\n//       acquire :30000,\r\n//       idle : 10000\r\n//     }\r\n//   }\r\n// )\r\n\r\nconst sequelize = new Sequelize(configdb.database, configdb.username, configdb.password, {\r\n  host: configdb.host,\r\n  dialect: configdb.dialect,\r\n  operatorsAliases: false,\r\n  dialectOptions: {\r\n    ssl: {\r\n      require: true, \r\n      rejectUnauthorized: false \r\n    }\r\n  },\r\n  pool: {\r\n    max: configdb.pool.max,\r\n    min: configdb.pool.min,\r\n    acquire: configdb.pool.acquire,\r\n    idle: configdb.pool.idle\r\n  }\r\n});\r\n\r\n\r\nconst initModels=(sequelize)=> {\r\n  const cart = _cart.init(sequelize, DataTypes);\r\n  const category = _category.init(sequelize, DataTypes);\r\n  const line_items = _line_items.init(sequelize, DataTypes);\r\n  const orders = _orders.init(sequelize, DataTypes);\r\n  const products = _products.init(sequelize, DataTypes);\r\n  const products_images = _products_images.init(sequelize, DataTypes);\r\n  const token_refresh = _token_refresh.init(sequelize, DataTypes);\r\n  const users = _users.init(sequelize, DataTypes);\r\n\r\n  line_items.belongsTo(cart, {foreignKey: \"lite_cart_id\"});\r\n  cart.hasMany(line_items, {foreignKey: \"lite_cart_id\"});\r\n  products_images.belongsTo(products, { as: \"prim_prod\", foreignKey: \"prim_prod_id\"});\r\n  products.hasMany(products_images, { as: \"products_images\", foreignKey: \"prim_prod_id\"});\r\n  cart.belongsTo(users, { as: \"cart_user\", foreignKey: \"cart_user_id\"});\r\n  users.hasMany(cart, { as: \"carts\", foreignKey: \"cart_user_id\"});\r\n  orders.belongsTo(users, { as: \"order_user\", foreignKey: \"order_user_id\"});\r\n  users.hasMany(orders, { as: \"orders\", foreignKey: \"order_user_id\"});\r\n  products.belongsTo(users, { as: \"prod_user\", foreignKey: \"prod_user_id\"});\r\n  users.hasMany(products, { as: \"products\", foreignKey: \"prod_user_id\"});\r\n\r\n  return {\r\n    cart,\r\n    category,\r\n    line_items,\r\n    orders,\r\n    products,\r\n    products_images,\r\n    token_refresh,\r\n    users,\r\n  };\r\n}\r\n\r\nconst models = initModels(sequelize);\r\n\r\nexport default models; \r\nexport {sequelize};"],"file":"init-models.js"}